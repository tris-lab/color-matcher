{"version":3,"sources":["efcolor.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Symbol","toStringTag","EFColor","a","b","c","mode","_r","_g","_b","rgbString","colorCode","doubleHex","cssRgb","r","g","cssHsl","hsl","h","s","l","undefined","this","remapValue","array","rgbFromHsl","Math","round","value","hslFromRgb","max","min","createFromRgb","createFromHSL","num","str","toString","toUpperCase","FontFamilies","FontWeights","ColorElementSelector","kind","element","label","onChange","charAt","className","type","e","currentTarget","size","maxLength","Number","App","useState","bgRed","setBgRed","bgGreen","setBgGreen","bgBlue","setBgBlue","bgColor","setBgColor","String","bgHue","setBgHue","bgSaturation","setBgSaturation","bgLightness","setBgLightness","bgColorCode","setBgColorCode","fgRed","setFgRed","fgGreen","setFgGreen","fgBlue","setFgBlue","fgColor","setFgColor","fgHue","setFgHue","fgSaturation","setFgSaturation","fgLightness","setFgLightness","fgColorCode","setFgColorCode","fontFamily","setFontFamily","fontSize","setFontSize","fontWeight","setFontWeight","textMessage","setTextMessage","colorElementChanged","color","source","updateHsl","updateRgb","bgRgbElements","bgHslElements","fgRgbElements","fgHslElements","document","body","style","background","map","v","key","id","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14e5fb30.chunk.js","sourcesContent":["\n/**\n * 色のモードを表す型。\n */\nexport type ColorMode =\n  | 'RGB'\n  | 'HSL';\n\n/**\n * 色を表す自作クラス。\n */\nexport default class EFColor {\n  // console.logのときに表示される名前を変える。\n  [Symbol.toStringTag] = \"EFColor\";\n\n  private _r: number;\n  private _g: number;\n  private _b: number;\n\n\t/**\n\t * EFColorのインスタンスを作成する。\n\t * @constructor\n\t * @param a RGBのときはR(赤)(0-255)、HSLのときはH(色相)(0-360)。\n\t * @param b RGBのときはG(緑)(0-255)、HSLのときはS(彩度)(0-100)。\n\t * @param c RGBのときはB(青)(0-255)、HSLのときはL(明度)(0-100)。\n\t * @param mode カラーモード。'RGB' or 'HSL'。省略時はRGBとして動作する。\n\t */\n  constructor(a: number, b: number, c: number, mode?: ColorMode) {\n    if (mode === undefined || mode === 'RGB') {\n      this._r = remapValue(a, 0, 255);\n      this._g = remapValue(b, 0, 255);\n      this._b = remapValue(c, 0, 255);\n    } else if (mode === 'HSL') {\n      let array = EFColor.rgbFromHsl(a, b, c);\n      this._r = array[0];\n      this._g = array[1];\n      this._b = array[2];\n    } else {\n      this._r = 0;\n      this._g = 0;\n      this._b = 0;\n    }\n  }\n\n\n  public get r(): number {\n    return Math.round(this._r);\n  }\n  public set r(value: number) {\n    this._r = remapValue(value, 0, 255);\n  }\n\n  public get g(): number {\n    return Math.round(this._g);\n  }\n  public set g(value: number) {\n    this._g = remapValue(value, 0, 255);\n  }\n\n  public get b(): number {\n    return Math.round(this._b);\n  }\n  public set b(value: number) {\n    this._b = remapValue(value, 0, 255);\n  }\n\n  /**\n   * HSLの値(整数)を返す。値の範囲は、H(0-359)、S(0-100)、L(0-100)。\n   */\n  public get hsl(): number[] {\n    const [h, s, l] = EFColor.hslFromRgb(this._r, this._g, this._b);\n    return [Math.round(h), Math.round(s), Math.round(l)]\n  }\n\n  /**\n   * RGBの文字列を返す。「R:xx G:xx B:xx」\n   */\n  rgbString = (): string => {\n    return `R:${this._r} G:${this._g} B:${this._b}`;\n  }\n\n  /**\n   * HTMLのカラーコードを返す。「#FFFFFF」形式。\n   */\n  colorCode = (): string => {\n    return `#${doubleHex(this._r)}${doubleHex(this._g)}${doubleHex(this._b)}`\n  }\n\n  /**\n   * CSSのRGB指定の文字列を返す。「rgb(xx, xx, xx)」形式。各色0-255。値は整数。\n   */\n  cssRgb = (): string => {\n    return `rgb(${this.r}, ${this.g}, ${this.b})`\n  }\n\n  /**\n   * CSSのHSL指定の文字列を返す。「hsl(xx, xx%, xx%)」形式。Hは0-359、SとLは0-100。値は整数。\n   */\n  cssHsl = (): string => {\n    const [h, s, l] = this.hsl;\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * EFColorのインスタンスを、RGB値を元に生成して返すファクトリメソッド。\n   * @param r R(赤)。0-255。\n   * @param g G(緑)。0-255。\n   * @param b B(青)。0-255。\n   */\n  static createFromRgb = (r: number, g: number, b: number): EFColor => {\n    return new EFColor(r, g, b, 'RGB');\n  }\n\n  /**\n   * EFColorのインスタンスを、HSL値を元に生成して返すファクトリメソッド。\n   * @param h 色相。0-359[deg]。360以上も可。\n   * @param s 彩度。0-100[%]。\n   * @param l 明度。0-100[%]。\n   */\n  static createFromHSL = (h: number, s: number, l: number): EFColor => {\n    const c = EFColor.rgbFromHsl(h, s, l);\n    return new EFColor(c[0], c[1], c[2], 'RGB');\n  }\n\n  /**\n   * HSLの値を変換したRGBの値(RGB値の配列)を返す関数。戻り値は小数部を含む。\n   * @param h 色相。0-359[deg]。360以上も可。\n   * @param s 彩度。0-100%。\n   * @param l 明度。0-100%。\n   */\n  static rgbFromHsl(h: number, s: number, l: number): number[] {\n    let r: number;\n    let g: number;\n    let b: number;\n    let max, min: number;\n\n    // Hを360度に収める。\n    h %= 360;\n\n    // 引数の範囲チェック。\n    h = remapValue(h, 0, 360);\n    s = remapValue(s, 0, 100);\n    l = remapValue(l, 0, 100);\n\n    if (l < 49) {\n      max = 2.55 * (l + l * (s / 100))\n      min = 2.55 * (l - l * (s / 100))\n    } else {\n      max = 2.55 * (l + (100 - l) * (s / 100))\n      min = 2.55 * (l - (100 - l) * (s / 100))\n    }\n\n    if (h < 60) {\n      r = max\n      g = min + (max - min) * h / 60\n      b = min\n    } else if (h < 120) {\n      r = min + (max - min) * (120 - h) / 60\n      g = max\n      b = min\n    } else if (h < 180) {\n      r = min\n      g = max\n      b = min + (max - min) * (h - 120) / 60\n    } else if (h < 240) {\n      r = min\n      g = min + (max - min) * (240 - h) / 60\n      b = max\n    } else if (h < 300) {\n      r = min + (max - min) * (h - 240) / 60\n      g = min\n      b = max\n    } else {\n      r = max\n      g = min\n      b = min + (max - min) * (360 - h) / 60\n    }\n\n    return [r, g, b];\n  }\n\n  /**\n   * RGBの値を変換したHSLの値(HSL値の配列)を返す関数。\n   * 戻り値は小数部を含む。Hは0-359、SとLは0-100。\n   * @param r R(赤)。0-255。\n   * @param g G(緑)。0-255。\n   * @param b B(青)。0-255。\n   */\n  static hslFromRgb = (r: number, g: number, b: number): number[] => {\n    let h = 0, s, l: number;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n\n    if (max === min) {\n      h = 0;\n    } else if (min === b) {\n      h = 60 * (g - r) / (max - min) + 60;\n    } else if (min === r) {\n      h = 60 * (b - g) / (max - min) + 180;\n    } else if (min === g) {\n      h = 60 * (r - b) / (max - min) + 300;\n    }\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    l = ((max + min) / 2) / 255 * 100;\n\n    const cnt = (max + min) / 2;\n    if (cnt <= 127) {\n      if (max === 0 && min === 0) {\n        s = 0;\n      } else {\n        s = (max - min) / (max + min) * 100;\n      }\n    } else {\n      if (max === 255 && min === 255) {\n        s = 100;\n      } else {\n        s = (max - min) / (510 - max - min) * 100;\n      }\n    }\n\n    return [h, s, l];\n  }\n}\n\n\n\n/**\n * 渡された値を、最小値と最大値の間に収める。最小値より小さいときは最小値、最大値より大きいときは最大値とする。\n * @param num 値。\n * @param min 最小値。\n * @param max 最大値。\n */\nconst remapValue = (num: number, min: number, max: number): number => {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  }\n  return num;\n};\n\n/**\n * 渡された数値を2桁の16進数文字列(大文字)にする関数。\n * 例：255→'FF'、10→'0A'\n * @param num 0～255の数字。範囲外のときは丸められる。整数でない場合は四捨五入される。\n */\nconst doubleHex = (num: number): string => {\n  if (num < 0) {\n    return '00';\n  }\n  if (num > 255) {\n    return 'FF';\n  }\n\n  let str = Math.round(num).toString(16);\n\n  // 1桁だけのときは頭に0を付ける。\n  if (num < 16) {\n    str = `0${str}`;\n  }\n\n  return str.toUpperCase();\n}\n\n","import React, { useState, CSSProperties } from 'react';\nimport './App.css';\nimport EFColor from './efcolor';\n\n\ntype ColorKind = 'Foreground' | 'Background' | null;\n\ntype ColorElement = 'Red' | 'Green' | 'Blue' | 'Hue' | 'Saturation' | 'Lightness';\n\ntype ColorElementProp = {\n  kind: ColorKind;\n  element: ColorElement;\n  label?: string; // 省略されたときは、elementの1文字目となる。\n  max: number; // 値の最大値。省略時は100。ちなみに最小値は0固定。\n  value: string;\n  onChange: (kind: ColorKind, element: ColorElement, value: string) => void;\n}\n\nconst FontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\nconst FontWeights = ['normal', 'bold'];\n\nconst ColorElementSelector: React.FC<ColorElementProp> = ({ kind, element, label, max, value, onChange }) => {\n  // labelが省略されているとき、elementの1文字目を取得してlabelとする。\n  if (label == null) {\n    label = element.charAt(0);\n  }\n\n  return (\n    <div className=\"color-element-selector\">\n      <label>\n        {label}:\n        <input type=\"range\" min={0} max={max}\n          onChange={(e) => onChange(kind, element, e.currentTarget.value)}\n          value={value} />\n        <input\n          type=\"text\" size={2} maxLength={3}\n          onChange={(e) => onChange(kind, element, e.currentTarget.value)}\n          value={value} />\n          ({Math.round(Number(value) / max * 100)}%)\n      </label>\n    </div>\n  )\n}\n\n\nconst App: React.FC = () => {\n\n  // Background\n  const [bgRed, setBgRed] = useState('60');\n  const [bgGreen, setBgGreen] = useState('160');\n  const [bgBlue, setBgBlue] = useState('160');\n  const [bgColor, setBgColor] = useState(() => new EFColor(Number(bgRed), Number(bgGreen), Number(bgGreen)));\n\n  let [h, s, l] = EFColor.hslFromRgb(Number(bgRed), Number(bgGreen), Number(bgBlue));\n  const [bgHue, setBgHue] = useState(String(Math.round(h)));\n  const [bgSaturation, setBgSaturation] = useState(String(Math.round(s)));\n  const [bgLightness, setBgLightness] = useState(String(Math.round(l)));\n\n  const [bgColorCode, setBgColorCode] = useState(() => {\n    const color = new EFColor(Number(bgRed), Number(bgGreen), Number(bgGreen));\n    return color.colorCode()\n  });\n\n  // Foreground (Text)\n  const [fgRed, setFgRed] = useState('180');\n  const [fgGreen, setFgGreen] = useState('230');\n  const [fgBlue, setFgBlue] = useState('230');\n  const [fgColor, setFgColor] = useState(() => new EFColor(Number(fgRed), Number(fgGreen), Number(fgGreen)));\n\n  [h, s, l] = EFColor.hslFromRgb(Number(fgRed), Number(fgGreen), Number(fgBlue));\n  const [fgHue, setFgHue] = useState(String(Math.round(h)));\n  const [fgSaturation, setFgSaturation] = useState(String(Math.round(s)));\n  const [fgLightness, setFgLightness] = useState(String(Math.round(l)));\n\n  const [fgColorCode, setFgColorCode] = useState(() => {\n    const color = new EFColor(Number(fgRed), Number(fgGreen), Number(fgGreen));\n    return color.colorCode()\n  });\n\n  const [fontFamily, setFontFamily] = useState(FontFamilies[1]);\n  const [fontSize, setFontSize] = useState(80);\n  const [fontWeight, setFontWeight] = useState(FontWeights[1]);\n  const [textMessage, setTextMessage] = useState('This is sample text.');\n\n  // 色の要素の値が変更されたときに実行される関数。useStateの更新用関数で値を更新しても反映にはタイムラグがあるので書き方に注意(別変数を作って処理する)。\n  const colorElementChanged = (kind: ColorKind, element: ColorElement, value: string) => {\n    let color: EFColor;\n    let source: EFColor;\n\n    if (kind === 'Background') {\n      source = new EFColor(Number(bgRed), Number(bgGreen), Number(bgBlue));\n      const [h, s, l] = [Number(bgHue), Number(bgSaturation), Number(bgLightness)];\n\n      switch (element) {\n        case 'Red':\n          color = new EFColor(Number(value), source.g, source.b);\n          setBgRed(value);\n          updateHsl(kind, color);\n          break;\n        case 'Green':\n          color = new EFColor(source.r, Number(value), source.b);\n          setBgGreen(value);\n          updateHsl(kind, color);\n          break;\n        case 'Blue':\n          color = new EFColor(source.r, source.g, Number(value));\n          setBgBlue(value);\n          updateHsl(kind, color);\n          break;\n        case 'Hue':\n          color = EFColor.createFromHSL(Number(value), s, l);\n          setBgHue(value);\n          updateRgb(kind, color);\n          break;\n        case 'Saturation':\n          color = EFColor.createFromHSL(h, Number(value), l);\n          setBgSaturation(value);\n          updateRgb(kind, color);\n          break;\n        case 'Lightness':\n          color = EFColor.createFromHSL(h, s, Number(value));\n          setBgLightness(value);\n          updateRgb(kind, color);\n          break;\n      }\n    } else {\n      source = new EFColor(Number(fgRed), Number(fgGreen), Number(fgBlue));\n      const [h, s, l] = [Number(fgHue), Number(fgSaturation), Number(fgLightness)];\n\n      switch (element) {\n        case 'Red':\n          color = new EFColor(Number(value), source.g, source.b);\n          setFgRed(value);\n          updateHsl(kind, color);\n          break;\n        case 'Green':\n          color = new EFColor(source.r, Number(value), source.b);\n          setFgGreen(value);\n          updateHsl(kind, color);\n          break;\n        case 'Blue':\n          color = new EFColor(source.r, source.g, Number(value));\n          setFgBlue(value);\n          updateHsl(kind, color);\n          break;\n        case 'Hue':\n          color = EFColor.createFromHSL(Number(value), s, l);\n          setFgHue(value);\n          updateRgb(kind, color);\n          break;\n        case 'Saturation':\n          color = EFColor.createFromHSL(h, Number(value), l);\n          setFgSaturation(value);\n          updateRgb(kind, color);\n          break;\n        case 'Lightness':\n          color = EFColor.createFromHSL(h, s, Number(value));\n          setFgLightness(value);\n          updateRgb(kind, color);\n          break;\n      }\n    }\n  }\n\n  const updateRgb = (kind: ColorKind, color: EFColor) => {\n    if (kind === 'Background') {\n      setBgRed(String(Math.round(color.r)));\n      setBgGreen(String(Math.round(color.g)));\n      setBgBlue(String(Math.round(color.b)));\n\n      setBgColor(color);\n      setBgColorCode(color.colorCode);\n    } else {\n      setFgRed(String(Math.round(color.r)));\n      setFgGreen(String(Math.round(color.g)));\n      setFgBlue(String(Math.round(color.b)));\n\n      setFgColor(color);\n      setFgColorCode(color.colorCode);\n    }\n  }\n\n  // HSLの値を更新する。\n  const updateHsl = (kind: ColorKind, color: EFColor) => {\n    const [h, s, l] = color.hsl;\n\n    if (kind === 'Background') {\n      setBgHue(String(Math.round(h)));\n      setBgSaturation(String(Math.round(s)));\n      setBgLightness(String(Math.round(l)));\n\n      setBgColor(color);\n      setBgColorCode(color.colorCode);\n    } else {\n      setFgHue(String(Math.round(h)));\n      setFgSaturation(String(Math.round(s)));\n      setFgLightness(String(Math.round(l)));\n\n      setFgColor(color);\n      setFgColorCode(color.colorCode);\n    }\n  }\n\n  const fontFamilyChanged = (value: string) => {\n    setFontFamily(value);\n  }\n  const fontSizeChanged = (value: string) => {\n    setFontSize(Number(value));\n  }\n  const fontWeightChanged = (value: string) => {\n    setFontWeight(value);\n  }\n  const textMessageChanged = (value: string) => {\n    setTextMessage(value);\n  }\n\n  const bgRgbElements: ColorElementProp[] = [\n    {\n      kind: null,\n      element: 'Red',\n      value: bgRed,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Green',\n      value: bgGreen,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Blue',\n      value: bgBlue,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n  ];\n\n  const bgHslElements: ColorElementProp[] = [\n    {\n      kind: null,\n      element: 'Hue',\n      value: bgHue,\n      max: 360,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Saturation',\n      value: bgSaturation,\n      max: 100,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Lightness',\n      value: bgLightness,\n      max: 100,\n      onChange: colorElementChanged,\n    },\n  ];\n\n  const fgRgbElements: ColorElementProp[] = [\n    {\n      kind: null,\n      element: 'Red',\n      value: fgRed,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Green',\n      value: fgGreen,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Blue',\n      value: fgBlue,\n      max: 255,\n      onChange: colorElementChanged,\n    },\n  ];\n\n  const fgHslElements: ColorElementProp[] = [\n    {\n      kind: null,\n      element: 'Hue',\n      value: fgHue,\n      max: 360,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Saturation',\n      value: fgSaturation,\n      max: 100,\n      onChange: colorElementChanged,\n    },\n    {\n      kind: null,\n      element: 'Lightness',\n      value: fgLightness,\n      max: 100,\n      onChange: colorElementChanged,\n    },\n  ];\n\n  // ページのタイトルを変更\n  // document.title = 'Color Viewer';\n\n  // 背景色を動的に設定。\n  document.body.style.background = bgColorCode;\n\n  return (\n    <div className=\"App\">\n      <h1>Color Viewer</h1>\n      <div className=\"kind-box\">\n        <h2>Foreground (Text) - {fgColorCode} - {fgColor.cssRgb()} - {fgColor.cssHsl()}</h2>\n        <div className=\"color-box\">\n          {\n            fgRgbElements.map((v) => (\n              <ColorElementSelector key={v.element} {...v} kind={'Foreground'} />\n            ))\n          }\n        </div>\n        <div className=\"color-box\">\n          {\n            fgHslElements.map((v) => (\n              <ColorElementSelector key={v.element} {...v} kind={'Foreground'} />\n            ))\n          }\n        </div>\n        <div className=\"text-properties-box\">\n          <div className=\"title\">Text Settings</div>&nbsp;\n          Text:&nbsp;\n          <input type=\"text\" size={30} value={textMessage} onChange={(e) => textMessageChanged(e.currentTarget.value)}></input>\n          &nbsp;&nbsp;&nbsp;\n          Size:\n          <input type=\"range\" min={6} max={200} id=\"font-size-slider\"\n            onChange={(e) => fontSizeChanged(e.currentTarget.value)}\n            value={fontSize} />\n          {fontSize}px\n          &nbsp;&nbsp;&nbsp;\n          Font:&nbsp;\n          <select\n            name=\"font-family\"\n            value={fontFamily}\n            onChange={(e) => fontFamilyChanged(e.currentTarget.value)}\n          >\n            {\n              FontFamilies.map((v) => (\n                <option value={v} key={v}>\n                  {v}\n                </option>\n              ))\n            }\n          </select>\n          &nbsp;&nbsp;&nbsp;\n          Weight:&nbsp;\n          <select\n            name=\"font-weight\"\n            value={fontWeight}\n            onChange={(e) => fontWeightChanged(e.currentTarget.value)}\n          >\n            {\n              FontWeights.map((v) => (\n                <option value={v} key={v}>\n                  {v}\n                </option>\n              ))\n            }\n          </select>\n        </div>\n      </div>\n      <div className=\"kind-box\">\n        <h2>Background - {bgColorCode} - {bgColor.cssRgb()} - {bgColor.cssHsl()}</h2>\n        <div className=\"color-box\">\n          {\n            bgRgbElements.map((v) => (\n              <ColorElementSelector key={v.element} {...v} kind={'Background'} />\n            ))\n          }\n        </div>\n        <div className=\"color-box\">\n          {\n            bgHslElements.map((v) => (\n              <ColorElementSelector key={v.element} {...v} kind={'Background'} />\n            ))\n          }\n        </div>\n      </div>\n      <div id=\"canvas-area\" style={{\n        // backgroundColor: bgColorCode,\n        color: fgColorCode,\n        fontSize: `${fontSize}px`,\n        fontFamily: fontFamily,\n        fontWeight: fontWeight,\n      } as CSSProperties}>\n        <p id=\"display-text\">{textMessage}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}