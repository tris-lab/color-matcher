{"version":3,"sources":["components/ColorElementSelector.tsx","components/ColorSelector.tsx","lib/efcolor.ts","components/appLogic.tsx","lib/eftypes.ts","components/Main.tsx","serviceWorker.ts","index.tsx"],"names":["ColorElementSelector","memo","kind","element","label","max","value","dispatch","charAt","className","type","min","onChange","e","currentTarget","size","maxLength","Math","round","Number","ColorSelector","colors","maxes","t","values","elements","i","push","map","v","key","prevProps","nextProps","Symbol","toStringTag","EFColor","a","b","c","mode","_r","_g","_b","rgbString","colorCode","doubleHex","cssRgb","r","g","cssHsl","hsl","h","s","l","undefined","this","remapValue","array","rgbFromHsl","hslFromRgb","createFromRgb","createFromHSL","num","str","toString","toUpperCase","reducer","state","action","obj","updateHslFlag","updateRgbFlag","foreground","background","red","green","blue","hue","saturation","lightness","color","String","rgb","FontFamilies","FontWeights","Main","useReducer","useState","fontFamily","setFontFamily","fontSize","setFontSize","fontWeight","setFontWeight","textMessage","setTextMessage","fgColor","bgColor","document","body","style","id","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.feb8af47.chunk.js","sourcesContent":["// 色を構成する1要素を表示・選択するコンポーネント。\n// スライダー・テキストボックス・値表示で構成される。\n\nimport React, { Dispatch, memo } from 'react';\nimport { ColorKind, ColorElement, Action } from '../lib/eftypes';\n\n\nexport type ColorElementProp = {\n  kind: ColorKind;\n  element: ColorElement;\n  label?: string;  // 省略されたときは、elementの1文字目となる。\n  max: number;     // 値の最大値。ちなみに最小値は0固定。\n  value: string;\n  dispatch: Dispatch<Action>;\n};\n\n\nconst ColorElementSelector: React.FC<ColorElementProp> = memo(({ kind, element, label, max, value, dispatch }) => {\n  // labelが省略されているとき、elementの1文字目を取得してlabelとする。\n  if (label == null) {\n    label = element.charAt(0);\n  }\n\n  return (\n    <div className=\"color-element-selector\" >\n      <label>\n        {label}:\n        <input\n          type=\"range\" min={0} max={max}\n          onChange={(e) => dispatch({\n            kind: kind,\n            element: element,\n            value: e.currentTarget.value,\n          })}\n          value={value} />\n        <input\n          type=\"text\" size={3} maxLength={3}\n          onChange={(e) => dispatch({\n            kind: kind,\n            element: element,\n            value: e.currentTarget.value,\n          })}\n          value={value} />\n        ({Math.round(Number(value) / max * 100)}%)\n      </label>\n    </div>\n  )\n});\n\nexport default ColorElementSelector;\n","// 色を表示・選択するコンポーネント。\n// RGBまたはHSLの3色をまとめて表示する。\n\nimport React, { Dispatch, memo } from 'react';\nimport ColorElementSelector, { ColorElementProp } from './ColorElementSelector'\nimport { ColorKind, ColorElement, ColorType, Action } from '../lib/eftypes';\n\n\nexport type ColorSelectorProps = {\n  t: ColorType;\n  kind: ColorKind;\n  values: string[];   // 表示する各色の値。\n  dispatch: Dispatch<Action>;\n};\n\n\nconst ColorSelector: React.FC<ColorSelectorProps> = memo(({ t, kind, values, dispatch }) => {\n  let elements: ColorElementProp[] = [];\n  let colors: ColorElement[];\n  let maxes: number[]\n\n  if (t === 'RGB') {\n    colors = ['Red', 'Green', 'Blue'];\n    maxes = [255, 255, 255];\n  } else {\n    // HSL\n    colors = ['Hue', 'Saturation', 'Lightness'];\n    maxes = [360, 100, 100];\n  }\n\n  for (const i in colors) {\n    elements.push({\n      kind: kind,\n      element: colors[i],\n      max: maxes[i],\n      value: values[i],\n      dispatch: dispatch,\n    });\n  }\n\n  return (\n    <div className=\"color-box\">\n      {\n        elements.map((v) => (\n          <ColorElementSelector key={v.element} {...v} />\n        ))\n      }\n    </div>\n  );\n}, (prevProps, nextProps) => {\n  // メモ化用の比較。前景/背景が同じで、色の値もすべて同じなら、trueを返して更新しない。\n  if (prevProps.kind === nextProps.kind) {\n    if (prevProps.values[0] === nextProps.values[0]\n        && prevProps.values[1] === nextProps.values[1]\n        && prevProps.values[2] === nextProps.values[2]) {\n      return true;\n    }\n  }\n  return false;\n});\n\nexport default ColorSelector;\n","\n/**\n * 色のモードを表す型。\n */\nexport type ColorMode =\n  | 'RGB'\n  | 'HSL';\n\n/**\n * 色を表す自作クラス。\n */\nexport default class EFColor {\n  // console.logのときに表示される名前を変える。\n  [Symbol.toStringTag] = \"EFColor\";\n\n  private _r: number;\n  private _g: number;\n  private _b: number;\n\n\t/**\n\t * EFColorのインスタンスを作成する。\n\t * @constructor\n\t * @param a RGBのときはR(赤)(0-255)、HSLのときはH(色相)(0-360)。\n\t * @param b RGBのときはG(緑)(0-255)、HSLのときはS(彩度)(0-100)。\n\t * @param c RGBのときはB(青)(0-255)、HSLのときはL(明度)(0-100)。\n\t * @param mode カラーモード。'RGB' or 'HSL'。省略時はRGBとして動作する。\n\t */\n  constructor(a: number, b: number, c: number, mode?: ColorMode) {\n    if (mode === undefined || mode === 'RGB') {\n      this._r = remapValue(a, 0, 255);\n      this._g = remapValue(b, 0, 255);\n      this._b = remapValue(c, 0, 255);\n    } else if (mode === 'HSL') {\n      let array = EFColor.rgbFromHsl(a, b, c);\n      this._r = array[0];\n      this._g = array[1];\n      this._b = array[2];\n    } else {\n      this._r = 0;\n      this._g = 0;\n      this._b = 0;\n    }\n  }\n\n\n  public get r(): number {\n    return Math.round(this._r);\n  }\n  public set r(value: number) {\n    this._r = remapValue(value, 0, 255);\n  }\n\n  public get g(): number {\n    return Math.round(this._g);\n  }\n  public set g(value: number) {\n    this._g = remapValue(value, 0, 255);\n  }\n\n  public get b(): number {\n    return Math.round(this._b);\n  }\n  public set b(value: number) {\n    this._b = remapValue(value, 0, 255);\n  }\n  \n  /**\n   * RGBの値(整数)を返す。値の範囲は、それぞれ0-255。\n   */\n  public get rgb(): number[] {\n    return [this.r, this.g, this.b];\n  }\n\n  /**\n   * HSLの値(整数)を返す。値の範囲は、H(0-359)、S(0-100)、L(0-100)。\n   */\n  public get hsl(): number[] {\n    const [h, s, l] = EFColor.hslFromRgb(this._r, this._g, this._b);\n    return [Math.round(h), Math.round(s), Math.round(l)]\n  }\n\n  /**\n   * RGBの文字列を返す。「R:xx G:xx B:xx」\n   */\n  rgbString = (): string => {\n    return `R:${this._r} G:${this._g} B:${this._b}`;\n  }\n\n  /**\n   * HTMLのカラーコードを返す。「#FFFFFF」形式。\n   */\n  colorCode = (): string => {\n    return `#${doubleHex(this._r)}${doubleHex(this._g)}${doubleHex(this._b)}`\n  }\n\n  /**\n   * CSSのRGB指定の文字列を返す。「rgb(xx, xx, xx)」形式。各色0-255。値は整数。\n   */\n  cssRgb = (): string => {\n    return `rgb(${this.r}, ${this.g}, ${this.b})`\n  }\n\n  /**\n   * CSSのHSL指定の文字列を返す。「hsl(xx, xx%, xx%)」形式。Hは0-359、SとLは0-100。値は整数。\n   */\n  cssHsl = (): string => {\n    const [h, s, l] = this.hsl;\n    return `hsl(${h}, ${s}%, ${l}%)`;\n  }\n\n  /**\n   * EFColorのインスタンスを、RGB値を元に生成して返すファクトリメソッド。\n   * @param r R(赤)。0-255。\n   * @param g G(緑)。0-255。\n   * @param b B(青)。0-255。\n   */\n  static createFromRgb = (r: number, g: number, b: number): EFColor => {\n    return new EFColor(r, g, b, 'RGB');\n  }\n\n  /**\n   * EFColorのインスタンスを、HSL値を元に生成して返すファクトリメソッド。\n   * @param h 色相。0-359[deg]。360以上も可。\n   * @param s 彩度。0-100[%]。\n   * @param l 明度。0-100[%]。\n   */\n  static createFromHSL = (h: number, s: number, l: number): EFColor => {\n    const c = EFColor.rgbFromHsl(h, s, l);\n    return new EFColor(c[0], c[1], c[2], 'RGB');\n  }\n\n  /**\n   * HSLの値を変換したRGBの値(RGB値の配列)を返す関数。戻り値は小数部を含む。\n   * @param h 色相。0-359[deg]。360以上も可。\n   * @param s 彩度。0-100%。\n   * @param l 明度。0-100%。\n   */\n  static rgbFromHsl(h: number, s: number, l: number): number[] {\n    let r: number;\n    let g: number;\n    let b: number;\n    let max, min: number;\n\n    // Hを360度に収める。\n    h %= 360;\n\n    // 引数の範囲チェック。\n    h = remapValue(h, 0, 360);\n    s = remapValue(s, 0, 100);\n    l = remapValue(l, 0, 100);\n\n    if (l < 49) {\n      max = 2.55 * (l + l * (s / 100))\n      min = 2.55 * (l - l * (s / 100))\n    } else {\n      max = 2.55 * (l + (100 - l) * (s / 100))\n      min = 2.55 * (l - (100 - l) * (s / 100))\n    }\n\n    if (h < 60) {\n      r = max\n      g = min + (max - min) * h / 60\n      b = min\n    } else if (h < 120) {\n      r = min + (max - min) * (120 - h) / 60\n      g = max\n      b = min\n    } else if (h < 180) {\n      r = min\n      g = max\n      b = min + (max - min) * (h - 120) / 60\n    } else if (h < 240) {\n      r = min\n      g = min + (max - min) * (240 - h) / 60\n      b = max\n    } else if (h < 300) {\n      r = min + (max - min) * (h - 240) / 60\n      g = min\n      b = max\n    } else {\n      r = max\n      g = min\n      b = min + (max - min) * (360 - h) / 60\n    }\n\n    return [r, g, b];\n  }\n\n  /**\n   * RGBの値を変換したHSLの値(HSL値の配列)を返す関数。\n   * 戻り値は小数部を含む。Hは0-359、SとLは0-100。\n   * @param r R(赤)。0-255。\n   * @param g G(緑)。0-255。\n   * @param b B(青)。0-255。\n   */\n  static hslFromRgb = (r: number, g: number, b: number): number[] => {\n    let h = 0, s, l: number;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n\n    if (max === min) {\n      h = 0;\n    } else if (min === b) {\n      h = 60 * (g - r) / (max - min) + 60;\n    } else if (min === r) {\n      h = 60 * (b - g) / (max - min) + 180;\n    } else if (min === g) {\n      h = 60 * (r - b) / (max - min) + 300;\n    }\n\n    if (h < 0) {\n      h += 360;\n    }\n\n    l = ((max + min) / 2) / 255 * 100;\n\n    const cnt = (max + min) / 2;\n    if (cnt <= 127) {\n      if (max === 0 && min === 0) {\n        s = 0;\n      } else {\n        s = (max - min) / (max + min) * 100;\n      }\n    } else {\n      if (max === 255 && min === 255) {\n        s = 100;\n      } else {\n        s = (max - min) / (510 - max - min) * 100;\n      }\n    }\n\n    return [h, s, l];\n  }\n}\n\n\n\n/**\n * 渡された値を、最小値と最大値の間に収める。最小値より小さいときは最小値、最大値より大きいときは最大値とする。\n * @param num 値。\n * @param min 最小値。\n * @param max 最大値。\n */\nconst remapValue = (num: number, min: number, max: number): number => {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  }\n  return num;\n};\n\n/**\n * 渡された数値を2桁の16進数文字列(大文字)にする関数。\n * 例：255→'FF'、10→'0A'\n * @param num 0～255の数字。範囲外のときは丸められる。整数でない場合は四捨五入される。\n */\nconst doubleHex = (num: number): string => {\n  if (num < 0) {\n    return '00';\n  }\n  if (num > 255) {\n    return 'FF';\n  }\n\n  let str = Math.round(num).toString(16);\n\n  // 1桁だけのときは頭に0を付ける。\n  if (num < 16) {\n    str = `0${str}`;\n  }\n\n  return str.toUpperCase();\n}\n\n","import { State, Action } from '../lib/eftypes';\nimport EFColor from '../lib/efcolor';\n\n\nexport const reducer = (state: State, action: Action) => {\n  let obj;\n  let updateHslFlag = false;\n  let updateRgbFlag = false;\n\n  // 編集対象のオブジェクトをColorKindから判別して取得する。\n  if (action.kind === 'Foreground') {\n    obj = state.foreground;\n  } else {\n    obj = state.background;\n  }\n\n  switch (action.element) {\n    case 'Red':\n      obj.red = action.value;\n      updateHslFlag = true;\n      break;\n    case 'Green':\n      obj.green = action.value;\n      updateHslFlag = true;\n      break;\n    case 'Blue':\n      obj.blue = action.value;\n      updateHslFlag = true;\n      break;\n    case 'Hue':\n      obj.hue = action.value;\n      updateRgbFlag = true;\n      break;\n    case 'Saturation':\n      obj.saturation = action.value;\n      updateRgbFlag = true;\n      break;\n    case 'Lightness':\n      obj.lightness = action.value;\n      updateRgbFlag = true;\n      break;\n  }\n\n  if (updateHslFlag) {\n    const color = new EFColor(Number(obj.red), Number(obj.green), Number(obj.blue));\n    const [h, s, l] = color.hsl;\n    const hsl = { hue: String(h), saturation: String(s), lightness: String(l) };\n    obj = { ...obj, ...hsl };\n  } else if (updateRgbFlag) {\n    const color = EFColor.createFromHSL(Number(obj.hue), Number(obj.saturation), Number(obj.lightness));\n    const [r, g, b] = color.rgb;\n    const rgb = { red: String(r), green: String(g), blue: String(b) };\n    obj = { ...obj, ...rgb };\n  }\n\n  // ColorKindに合わせてデータを更新。\n  if (action.kind === 'Foreground') {\n    return {\n      foreground: obj,\n      background: { ...state.background },\n    };\n  } else {\n    return {\n      foreground: { ...state.foreground },\n      background: obj,\n    };\n  }\n};\n","\nexport type ColorType = 'RGB' | 'HSL';\n\nexport type ColorKind = 'Foreground' | 'Background';\n\nexport type ColorElement = 'Red' | 'Green' | 'Blue' | 'Hue' | 'Saturation' | 'Lightness';\n\nexport const FontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\nexport const FontWeights = ['normal', 'bold'];\n\n\n// ----------------------------------------------------------------------\n// useReduce用の定義\n// ----------------------------------------------------------------------\nexport type State = {\n  foreground: {\n    red: string;\n    green: string;\n    blue: string;\n    hue: string;\n    saturation: string;\n    lightness: string;\n  };\n  background: {\n    red: string;\n    green: string;\n    blue: string;\n    hue: string;\n    saturation: string;\n    lightness: string;\n  };\n};\n\nexport type Action = {\n  kind: ColorKind;\n  element: ColorElement;\n  value: string;\n};\n\n","import React, { useState, useReducer, CSSProperties } from 'react';\nimport ColorSelector from './ColorSelector'\nimport { reducer } from './appLogic'\nimport EFColor from '../lib/efcolor';\nimport { FontFamilies, FontWeights } from '../lib/eftypes';\nimport './Main.css';\n\n\nconst Main: React.FC = () => {\n  // 初期値はRGBだけ指定してHSLは計算で出したいところだが、確実に1回だけ計算する方法がわからないのでベタ書き。\n  const [{ background, foreground }, dispatch] = useReducer(reducer, {\n    foreground: {\n      red: '180',\n      green: '230',\n      blue: '230',\n      hue: '180',\n      saturation: '50',\n      lightness: '80',\n    },\n    background: {\n      red: '60',\n      green: '160',\n      blue: '160',\n      hue: '180',\n      saturation: '45',\n      lightness: '43',\n    },\n  });\n\n  const [fontFamily, setFontFamily] = useState(FontFamilies[1]);\n  const [fontSize, setFontSize] = useState(80);\n  const [fontWeight, setFontWeight] = useState(FontWeights[1]);\n  const [textMessage, setTextMessage] = useState('This is sample text.');\n\n  // テキスト・フォント関係の変更時のイベント処理\n  const fontFamilyChanged = (value: string) => {\n    setFontFamily(value);\n  }\n  const fontSizeChanged = (value: string) => {\n    setFontSize(Number(value));\n  }\n  const fontWeightChanged = (value: string) => {\n    setFontWeight(value);\n  }\n  const textMessageChanged = (value: string) => {\n    setTextMessage(value);\n  }\n\n  // 表示に使用する色を生成する。\n  const fgColor = new EFColor(Number(foreground.red), Number(foreground.green), Number(foreground.blue))\n  const bgColor = new EFColor(Number(background.red), Number(background.green), Number(background.blue))\n\n  // ページのタイトルを変更\n  // document.title = 'Color Viewer';\n\n  // 背景色を動的に設定。\n  document.body.style.background = bgColor.colorCode();\n\n  return (\n    <div className=\"App\">\n      <h1>Color Viewer</h1>\n      <div className=\"kind-box\">\n        <h2>Foreground (Text) - {fgColor.colorCode()} - {fgColor.cssRgb()} - {fgColor.cssHsl()}</h2>\n        <ColorSelector\n          t=\"RGB\"\n          kind=\"Foreground\"\n          values={[foreground.red, foreground.green, foreground.blue]}\n          dispatch={dispatch}\n        />\n        <ColorSelector\n          t=\"HSL\"\n          kind=\"Foreground\"\n          values={[foreground.hue, foreground.saturation, foreground.lightness]}\n          dispatch={dispatch}\n        />\n        <div className=\"text-properties-box\">\n          <div className=\"title\">Text Settings</div>&nbsp;\n          Text:&nbsp;\n          <input type=\"text\" size={30} value={textMessage} onChange={(e) => textMessageChanged(e.currentTarget.value)}></input>\n          &nbsp;&nbsp;&nbsp;\n          Size:\n          <input type=\"range\" min={6} max={200} id=\"font-size-slider\"\n            onChange={(e) => fontSizeChanged(e.currentTarget.value)}\n            value={fontSize} />\n          {fontSize}px\n          &nbsp;&nbsp;&nbsp;\n          Font:&nbsp;\n          <select\n            name=\"font-family\"\n            value={fontFamily}\n            onChange={(e) => fontFamilyChanged(e.currentTarget.value)}\n          >\n            {\n              FontFamilies.map((v) => (\n                <option value={v} key={v}>{v}</option>\n              ))\n            }\n          </select>\n          &nbsp;&nbsp;&nbsp;\n          Weight:&nbsp;\n          <select\n            name=\"font-weight\"\n            value={fontWeight}\n            onChange={(e) => fontWeightChanged(e.currentTarget.value)}\n          >\n            {\n              FontWeights.map((v) => (\n                <option value={v} key={v}>{v}</option>\n              ))\n            }\n          </select>\n        </div>\n      </div>\n\n      <div className=\"kind-box\">\n        <h2>Background - {bgColor.colorCode()} - {bgColor.cssRgb()} - {bgColor.cssHsl()}</h2>\n        <ColorSelector\n          t=\"RGB\"\n          kind=\"Background\"\n          values={[background.red, background.green, background.blue]}\n          dispatch={dispatch}\n        />\n        <ColorSelector\n          t=\"HSL\"\n          kind=\"Background\"\n          values={[background.hue, background.saturation, background.lightness]}\n          dispatch={dispatch}\n        />\n      </div>\n\n      <div id=\"canvas-area\" style={{\n        color: fgColor.colorCode(),\n        fontSize: `${fontSize}px`,\n        fontFamily: fontFamily,\n        fontWeight: fontWeight,\n      } as CSSProperties}>\n        <p id=\"display-text\">{textMessage}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Main from './components/Main'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}